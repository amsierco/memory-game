{"ast":null,"code":"var _jsxFileName = \"/home/virtualaustin/repos/memory-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport '../style.css';\nimport axolotl from '../images/axolotl.png';\nimport cow from '../images/cow.png';\nimport creeper from '../images/creeper.png';\nimport enderman from '../images/enderman.png';\nimport fox from '../images/fox.jpg';\nimport pig from '../images/pig.png';\nimport sheep from '../images/sheep.png';\nimport skeleton from '../images/skeleton.png';\nimport slime from '../images/slime.png';\nimport spider from '../images/spider.jpg';\nimport steve from '../images/steve.png';\nimport villager from '../images/villager.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameOver, endGame] = useState(false);\n  let initDeck = [/*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: axolotl,\n    text: \"Axolotl\"\n  }, 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: cow,\n    text: \"Cow\"\n  }, 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: creeper,\n    text: \"Creeper\"\n  }, 2, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: enderman,\n    text: \"Enderman\"\n  }, 3, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: fox,\n    text: \"Fox\"\n  }, 4, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: pig,\n    text: \"Pig\"\n  }, 5, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: sheep,\n    text: \"Sheep\"\n  }, 6, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: skeleton,\n    text: \"Skeleton\"\n  }, 7, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: slime,\n    text: \"Slime\"\n  }, 8, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: spider,\n    text: \"Spider\"\n  }, 9, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: steve,\n    text: \"Steve\"\n  }, 10, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: villager,\n    text: \"Villager\"\n  }, 11, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this)];\n  const [deck, updateDeck] = useState(initDeck);\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  function takeTurn(valid) {\n    // End game\n    if (!valid) {\n      endGame(true);\n    }\n\n    // Update score\n    setScore(score + 1);\n  }\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n    }\n    console.log('Score: ' + score);\n    // Shuffle deck\n    updateDeck(shuffle(deck));\n  }, [score]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), !gameOver ? deck : /*#__PURE__*/_jsxDEV(GameOver, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"Hd0E8xJI7Pj6mv6F61STMASoNTw=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useEffect","useState","Header","GameOver","Card","axolotl","cow","creeper","enderman","fox","pig","sheep","skeleton","slime","spider","steve","villager","jsxDEV","_jsxDEV","GameBoard","_s","score","setScore","highScore","setHighScore","gameOver","endGame","initDeck","takeTurn","image","text","fileName","_jsxFileName","lineNumber","columnNumber","deck","updateDeck","shuffle","array","i","length","j","Math","floor","random","temp","valid","console","log","className","children","_c","$RefreshReg$"],"sources":["/home/virtualaustin/repos/memory-game/src/components/GameBoard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport '../style.css';\nimport axolotl from '../images/axolotl.png';\nimport cow from '../images/cow.png';\nimport creeper from '../images/creeper.png';\nimport enderman from '../images/enderman.png';\nimport fox from '../images/fox.jpg';\nimport pig from '../images/pig.png';\nimport sheep from '../images/sheep.png';\nimport skeleton from '../images/skeleton.png';\nimport slime from '../images/slime.png';\nimport spider from '../images/spider.jpg';\nimport steve from '../images/steve.png';\nimport villager from '../images/villager.png';\n\nconst GameBoard = () => {\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [gameOver, endGame] = useState(false);\n\n    let initDeck = [\n        <Card takeTurn={takeTurn}\n            image={axolotl}\n            text='Axolotl'\n            key={0}\n        />,\n        <Card takeTurn={takeTurn}\n            image={cow}\n            text='Cow'\n            key={1}\n        />,\n        <Card takeTurn={takeTurn}\n            image={creeper}\n            text='Creeper'\n            key={2}\n        />,\n        <Card takeTurn={takeTurn}\n            image={enderman}\n            text='Enderman'\n            key={3}\n        />,\n        <Card takeTurn={takeTurn}\n            image={fox}\n            text='Fox'\n            key={4}\n        />,\n        <Card takeTurn={takeTurn}\n            image={pig}\n            text='Pig'\n            key={5}\n        />,\n        <Card takeTurn={takeTurn}\n            image={sheep}\n            text='Sheep'\n            key={6}\n        />,\n        <Card takeTurn={takeTurn}\n            image={skeleton}\n            text='Skeleton'\n            key={7}\n        />,\n        <Card takeTurn={takeTurn}\n            image={slime}\n            text='Slime'\n            key={8}\n        />,\n        <Card takeTurn={takeTurn}\n            image={spider}\n            text='Spider'\n            key={9}\n        />,\n        <Card takeTurn={takeTurn}\n            image={steve}\n            text='Steve'\n            key={10}\n        />,\n        <Card takeTurn={takeTurn}\n            image={villager}\n            text='Villager'\n            key={11}\n        />\n    ];\n\n    const [deck, updateDeck] = useState(initDeck);\n\n    function shuffle(array){\n        for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n    }\n\n    function takeTurn(valid){\n        // End game\n        if(!valid){\n            endGame(true);\n        }\n\n        // Update score\n        setScore((score + 1));\n    }\n\n    useEffect(() => {\n        if(score > highScore){\n            setHighScore(score);\n        }\n        console.log('Score: ' + score);\n        // Shuffle deck\n        updateDeck(shuffle(deck));\n    }, [score]);\n\n    return (\n        <div className='game-board'>\n            <Header score={score} highScore={highScore} />\n            {!gameOver ? deck : <GameOver score={score} highScore={highScore} />}\n        </div>\n    );\n\n}\n\nexport default GameBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}