{"ast":null,"code":"var _jsxFileName = \"/home/virtualaustin/repos/memory-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport { data } from './data';\nimport '../style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameOver, endGame] = useState(false);\n\n  /*\n  let initDeck = [\n      <Card takeTurn={takeTurn}\n          image={axolotl}\n          text='Axolotl'\n          key={0}\n      />,\n      <Card takeTurn={takeTurn}\n          image={cow}\n          text='Cow'\n          key={1}\n      />,\n      <Card takeTurn={takeTurn}\n          image={creeper}\n          text='Creeper'\n          key={2}\n      />,\n      <Card takeTurn={takeTurn}\n          image={enderman}\n          text='Enderman'\n          key={3}\n      />,\n      <Card takeTurn={takeTurn}\n          image={fox}\n          text='Fox'\n          key={4}\n      />,\n      <Card takeTurn={takeTurn}\n          image={pig}\n          text='Pig'\n          key={5}\n      />,\n      <Card takeTurn={takeTurn}\n          image={sheep}\n          text='Sheep'\n          key={6}\n      />,\n      <Card takeTurn={takeTurn}\n          image={skeleton}\n          text='Skeleton'\n          key={7}\n      />,\n      <Card takeTurn={takeTurn}\n          image={slime}\n          text='Slime'\n          key={8}\n      />,\n      <Card takeTurn={takeTurn}\n          image={spider}\n          text='Spider'\n          key={9}\n      />,\n      <Card takeTurn={takeTurn}\n          image={steve}\n          text='Steve'\n          key={10}\n      />,\n      <Card takeTurn={takeTurn}\n          image={villager}\n          text='Villager'\n          key={11}\n      />\n  ];\n  */\n\n  let initDeck = data.map(el => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      image: el.image,\n      text: el.text,\n      takeTurn: takeTurn\n    }, el.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);\n  });\n  const [deck, updateDeck] = useState(initDeck);\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  function takeTurn(valid) {\n    // End game\n    if (!valid) {\n      endGame(true);\n    }\n\n    // Update score\n    setScore(score + 1);\n    // if(score > highScore){\n    //     setHighScore(score => score);\n    // }\n    // Shuffle deck\n    updateDeck(shuffle(deck));\n  }\n  useEffect(() => {\n    console.log('Score: ' + score);\n  }, [takeTurn]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), !gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck\",\n      children: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"Hd0E8xJI7Pj6mv6F61STMASoNTw=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useEffect","useState","Header","GameOver","Card","data","jsxDEV","_jsxDEV","GameBoard","_s","score","setScore","highScore","setHighScore","gameOver","endGame","initDeck","map","el","image","text","takeTurn","id","fileName","_jsxFileName","lineNumber","columnNumber","deck","updateDeck","shuffle","array","i","length","j","Math","floor","random","temp","valid","console","log","className","children","_c","$RefreshReg$"],"sources":["/home/virtualaustin/repos/memory-game/src/components/GameBoard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport { data } from './data';\nimport '../style.css';\n\nconst GameBoard = () => {\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [gameOver, endGame] = useState(false);\n\n    /*\n    let initDeck = [\n        <Card takeTurn={takeTurn}\n            image={axolotl}\n            text='Axolotl'\n            key={0}\n        />,\n        <Card takeTurn={takeTurn}\n            image={cow}\n            text='Cow'\n            key={1}\n        />,\n        <Card takeTurn={takeTurn}\n            image={creeper}\n            text='Creeper'\n            key={2}\n        />,\n        <Card takeTurn={takeTurn}\n            image={enderman}\n            text='Enderman'\n            key={3}\n        />,\n        <Card takeTurn={takeTurn}\n            image={fox}\n            text='Fox'\n            key={4}\n        />,\n        <Card takeTurn={takeTurn}\n            image={pig}\n            text='Pig'\n            key={5}\n        />,\n        <Card takeTurn={takeTurn}\n            image={sheep}\n            text='Sheep'\n            key={6}\n        />,\n        <Card takeTurn={takeTurn}\n            image={skeleton}\n            text='Skeleton'\n            key={7}\n        />,\n        <Card takeTurn={takeTurn}\n            image={slime}\n            text='Slime'\n            key={8}\n        />,\n        <Card takeTurn={takeTurn}\n            image={spider}\n            text='Spider'\n            key={9}\n        />,\n        <Card takeTurn={takeTurn}\n            image={steve}\n            text='Steve'\n            key={10}\n        />,\n        <Card takeTurn={takeTurn}\n            image={villager}\n            text='Villager'\n            key={11}\n        />\n    ];\n    */\n\n    let initDeck = data.map(el => {\n        return <Card image={el.image} text={el.text} takeTurn={takeTurn} key={el.id}/>\n    })\n\n    const [deck, updateDeck] = useState(initDeck);\n\n    function shuffle(array){\n        for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n    }\n\n    function takeTurn(valid){\n        // End game\n        if(!valid){\n            endGame(true);\n        }\n\n        // Update score\n        setScore(score + 1);\n        // if(score > highScore){\n        //     setHighScore(score => score);\n        // }\n        // Shuffle deck\n        updateDeck(shuffle(deck));\n    }\n\n    useEffect(() => {\n        console.log('Score: '+score);\n    }, [takeTurn]);\n\n    return (\n        <div className='game-board'>\n            <Header score={score} highScore={highScore} />\n            {!gameOver ?\n                <div className='deck'>{deck}</div> \n            : \n                <GameOver score={score} highScore={highScore} \n            />}\n        </div>\n    );\n\n}\n\nexport default GameBoard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,IAAI,QAAQ,QAAQ;AAC7B,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACa,QAAQ,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAE3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,IAAIe,QAAQ,GAAGX,IAAI,CAACY,GAAG,CAACC,EAAE,IAAI;IAC1B,oBAAOX,OAAA,CAACH,IAAI;MAACe,KAAK,EAAED,EAAE,CAACC,KAAM;MAACC,IAAI,EAAEF,EAAE,CAACE,IAAK;MAACC,QAAQ,EAAEA;IAAS,GAAMH,EAAE,CAACI,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAClF,CAAC,CAAC;EAEF,MAAM,CAACC,IAAI,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAACe,QAAQ,CAAC;EAE7C,SAASa,OAAOA,CAACC,KAAK,EAAC;IACnB,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,MAAMM,IAAI,GAAGP,KAAK,CAACC,CAAC,CAAC;MACrBD,KAAK,CAACC,CAAC,CAAC,GAAGD,KAAK,CAACG,CAAC,CAAC;MACnBH,KAAK,CAACG,CAAC,CAAC,GAAGI,IAAI;IACjB;IACA,OAAOP,KAAK;EAChB;EAEA,SAAST,QAAQA,CAACiB,KAAK,EAAC;IACpB;IACA,IAAG,CAACA,KAAK,EAAC;MACNvB,OAAO,CAAC,IAAI,CAAC;IACjB;;IAEA;IACAJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACnB;IACA;IACA;IACA;IACAkB,UAAU,CAACC,OAAO,CAACF,IAAI,CAAC,CAAC;EAC7B;EAEA3B,SAAS,CAAC,MAAM;IACZuC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAC9B,KAAK,CAAC;EAChC,CAAC,EAAE,CAACW,QAAQ,CAAC,CAAC;EAEd,oBACId,OAAA;IAAKkC,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBnC,OAAA,CAACL,MAAM;MAACQ,KAAK,EAAEA,KAAM;MAACE,SAAS,EAAEA;IAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7C,CAACZ,QAAQ,gBACNP,OAAA;MAAKkC,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAEf;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAElCnB,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA,KAAM;MAACE,SAAS,EAAEA;IAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGd,CAAC;AAAAjB,EAAA,CApHKD,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAsHf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}