{"ast":null,"code":"var _jsxFileName = \"/home/virtualaustin/repos/memory-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport { data } from './data';\nimport '../style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameOver, endGame] = useState(false);\n  let initDeck = data.map(el => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      image: el.image,\n      text: el.text,\n      takeTurn: takeTurn\n    }, el.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  });\n  const [deck, updateDeck] = useState(initDeck);\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  function takeTurn(valid) {\n    if (!valid) {\n      endGame(true);\n    }\n    setScore(score => score + 1);\n    if (score > highScore) {\n      setHighScore(highScore => score);\n    }\n    let temp = shuffle(data).map(el => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        image: el.image,\n        text: el.text,\n        takeTurn: takeTurn\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this);\n    });\n    updateDeck(temp);\n  }\n  useEffect(() => {\n    if (score) {\n      console.log('Score: ' + score);\n    }\n    if (highScore) {\n      console.log('High Score: ' + highScore);\n    }\n  }, [score, highScore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), !gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck\",\n      children: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"Hd0E8xJI7Pj6mv6F61STMASoNTw=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useEffect","useState","Header","GameOver","Card","data","jsxDEV","_jsxDEV","GameBoard","_s","score","setScore","highScore","setHighScore","gameOver","endGame","initDeck","map","el","image","text","takeTurn","id","fileName","_jsxFileName","lineNumber","columnNumber","deck","updateDeck","shuffle","array","i","length","j","Math","floor","random","temp","valid","console","log","className","children","_c","$RefreshReg$"],"sources":["/home/virtualaustin/repos/memory-game/src/components/GameBoard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport { data } from './data';\nimport '../style.css';\n\nconst GameBoard = (() => {\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [gameOver, endGame] = useState(false);\n\n    let initDeck = data.map(el => {\n        return <Card image={el.image} text={el.text} takeTurn={takeTurn} key={el.id}/>\n    })\n    const [deck, updateDeck] = useState(initDeck);\n\n    function shuffle(array){\n        for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n    }\n\n    function takeTurn(valid){\n        if(!valid){\n            endGame(true);\n        }\n        setScore(score => score + 1);\n        if(score > highScore){\n            setHighScore(highScore => score);\n        }\n        let temp = shuffle(data).map(el => {\n            return <Card image={el.image} text={el.text} takeTurn={takeTurn} key={el.id}/>\n        })\n        updateDeck(temp);\n    }\n\n    useEffect(() => {\n        if(score){console.log('Score: '+score);}\n        if(highScore){console.log('High Score: '+highScore);}\n    }, [score, highScore]);\n\n    return (\n        <div className='game-board'>\n            <Header score={score} highScore={highScore} />\n            {\n            !gameOver ?\n                <div className='deck'>{deck}</div> \n            : \n                <GameOver score={score} highScore={highScore} \n            />}\n        </div>\n    );\n\n});\n\nexport default GameBoard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,IAAI,QAAQ,QAAQ;AAC7B,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,SAAS,GAAIA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACa,QAAQ,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE3C,IAAIe,QAAQ,GAAGX,IAAI,CAACY,GAAG,CAACC,EAAE,IAAI;IAC1B,oBAAOX,OAAA,CAACH,IAAI;MAACe,KAAK,EAAED,EAAE,CAACC,KAAM;MAACC,IAAI,EAAEF,EAAE,CAACE,IAAK;MAACC,QAAQ,EAAEA;IAAS,GAAMH,EAAE,CAACI,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAClF,CAAC,CAAC;EACF,MAAM,CAACC,IAAI,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAACe,QAAQ,CAAC;EAE7C,SAASa,OAAOA,CAACC,KAAK,EAAC;IACnB,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,MAAMM,IAAI,GAAGP,KAAK,CAACC,CAAC,CAAC;MACrBD,KAAK,CAACC,CAAC,CAAC,GAAGD,KAAK,CAACG,CAAC,CAAC;MACnBH,KAAK,CAACG,CAAC,CAAC,GAAGI,IAAI;IACjB;IACA,OAAOP,KAAK;EAChB;EAEA,SAAST,QAAQA,CAACiB,KAAK,EAAC;IACpB,IAAG,CAACA,KAAK,EAAC;MACNvB,OAAO,CAAC,IAAI,CAAC;IACjB;IACAJ,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAC,CAAC;IAC5B,IAAGA,KAAK,GAAGE,SAAS,EAAC;MACjBC,YAAY,CAACD,SAAS,IAAIF,KAAK,CAAC;IACpC;IACA,IAAI2B,IAAI,GAAGR,OAAO,CAACxB,IAAI,CAAC,CAACY,GAAG,CAACC,EAAE,IAAI;MAC/B,oBAAOX,OAAA,CAACH,IAAI;QAACe,KAAK,EAAED,EAAE,CAACC,KAAM;QAACC,IAAI,EAAEF,EAAE,CAACE,IAAK;QAACC,QAAQ,EAAEA;MAAS,GAAMH,EAAE,CAACI,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAClF,CAAC,CAAC;IACFE,UAAU,CAACS,IAAI,CAAC;EACpB;EAEArC,SAAS,CAAC,MAAM;IACZ,IAAGU,KAAK,EAAC;MAAC6B,OAAO,CAACC,GAAG,CAAC,SAAS,GAAC9B,KAAK,CAAC;IAAC;IACvC,IAAGE,SAAS,EAAC;MAAC2B,OAAO,CAACC,GAAG,CAAC,cAAc,GAAC5B,SAAS,CAAC;IAAC;EACxD,CAAC,EAAE,CAACF,KAAK,EAAEE,SAAS,CAAC,CAAC;EAEtB,oBACIL,OAAA;IAAKkC,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBnC,OAAA,CAACL,MAAM;MAACQ,KAAK,EAAEA,KAAM;MAACE,SAAS,EAAEA;IAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE9C,CAACZ,QAAQ,gBACLP,OAAA;MAAKkC,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAEf;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAElCnB,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA,KAAM;MAACE,SAAS,EAAEA;IAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGd,CAAE;AAACjB,EAAA,CAnDGD,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}