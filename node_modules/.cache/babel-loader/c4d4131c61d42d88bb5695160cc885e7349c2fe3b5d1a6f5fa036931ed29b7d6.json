{"ast":null,"code":"var _jsxFileName = \"/home/virtualaustin/repos/memory-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\nimport icon from '../images/axolotl.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameOver, endGame] = useState(false);\n  let initDeck = [/*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: icon,\n    text: \"Axolotl\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/cow.png\",\n    text: \"Cow\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/creeper.png\",\n    text: \"Creeper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/enderman.png\",\n    text: \"Enderman\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/fox.jpg\",\n    text: \"Fox\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/pig.png\",\n    text: \"Pig\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/sheep.png\",\n    text: \"Sheep\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/skeleton.png\",\n    text: \"Skeleton\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/slime.png\",\n    text: \"Slime\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/spider.jpg\",\n    text: \"Spider\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/steve.png\",\n    text: \"Steve\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card, {\n    takeTurn: takeTurn,\n    image: \"../images/villager.png\",\n    text: \"Villager\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this)];\n  const [deck, updateDeck] = useState(initDeck);\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  function takeTurn(valid) {\n    console.log('pressed! ' + score + valid);\n\n    // End game\n    if (!valid) {\n      alert('game over');\n      endGame(true);\n    }\n\n    // Update score\n    setScore(score++);\n    if (score > highScore) {\n      setHighScore(score);\n    }\n\n    // Shuffle deck\n    updateDeck(shuffle(deck));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"../images/cow.png\",\n      alt: \"alt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), !gameOver ? deck : /*#__PURE__*/_jsxDEV(GameOver, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"jLJPJ/NMtF5xR/RuNulGhgN1ihc=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","Header","GameOver","Card","icon","jsxDEV","_jsxDEV","GameBoard","_s","score","setScore","highScore","setHighScore","gameOver","endGame","initDeck","takeTurn","image","text","fileName","_jsxFileName","lineNumber","columnNumber","deck","updateDeck","shuffle","array","i","length","j","Math","floor","random","temp","valid","console","log","alert","className","children","src","alt","_c","$RefreshReg$"],"sources":["/home/virtualaustin/repos/memory-game/src/components/GameBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from './Header';\nimport GameOver from './GameOver';\nimport Card from './Card';\n\nimport icon from '../images/axolotl.png'\n\nconst GameBoard = () => {\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [gameOver, endGame] = useState(false);\n\n    let initDeck = [\n        <Card takeTurn={takeTurn}\n            image={icon}\n            text='Axolotl'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/cow.png'\n        text='Cow'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/creeper.png'\n        text='Creeper'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/enderman.png'\n        text='Enderman'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/fox.jpg'\n        text='Fox'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/pig.png'\n        text='Pig'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/sheep.png'\n        text='Sheep'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/skeleton.png'\n        text='Skeleton'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/slime.png'\n        text='Slime'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/spider.jpg'\n        text='Spider'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/steve.png'\n        text='Steve'\n        />,\n        <Card takeTurn={takeTurn}\n        image='../images/villager.png'\n        text='Villager'\n        />,\n    ];\n\n    const [deck, updateDeck] = useState(initDeck);\n\n    function shuffle(array){\n        for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n    }\n\n    function takeTurn(valid){\n        console.log('pressed! ' + score + valid);\n\n        // End game\n        if(!valid){\n            alert('game over');\n            endGame(true);\n        }\n\n        // Update score\n        setScore(score++);\n        if(score > highScore){\n            setHighScore(score);\n        }\n\n        // Shuffle deck\n        updateDeck(shuffle(deck));\n    }\n\n    return (\n        <div className='game-board'>\n            <img src='../images/cow.png' alt=\"alt\"/>\n            <Header score={score} highScore={highScore} />\n            {!gameOver ? deck : <GameOver score={score} highScore={highScore} />}\n        </div>\n    );\n\n}\n\nexport default GameBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}